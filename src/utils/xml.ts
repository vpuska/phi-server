/**
 * utils/xml.ts
 * ------------
 * Helper library for phi-load module.  Takes an object generated by the ```xml-js```
 * library and re-casts it to our custom ```XmlElement``` class to make the data easier
 * to work with.
 * @Author V. Puska
 * @Date 23 Nov 2024
 **/
import xmljs = require("xml-js");

// Object returned by xml-js
type Xml2JsObject = {
    type: string;
    name: string;
    text?: string;
    attributes?: Object;
    elements?: Array<Xml2JsObject>;
}

/**
 * Utility class to encapsulate ```xml-js``` JSON object.
 */
export class XmlElement {

    readonly obj: Xml2JsObject;
    readonly type: string;
    readonly tag: string;
    readonly text: string = "";
    readonly attributes: Object = {};
    readonly content: Array<Xml2JsObject> = [];

    /**
     * Factory function taking XML string/bytes and returns ```XmlElement``` instance.
     * @param xml XML string.
     * @returns {XmlElement} XmlElement
     */
    static fromXML(xml:any): XmlElement {
        return new XmlElement(xmljs.xml2js(xml).elements[0]);
    }
    /**
     * Constructor for {@Link XmlElement}
     * @param xml2jsObject ```xml-js``` object.
     */
    constructor(xml2jsObject: Xml2JsObject) {
        this.obj = xml2jsObject;
        this.type = xml2jsObject.type;
        this.tag = xml2jsObject.name;
        if (xml2jsObject.hasOwnProperty("attributes"))
            this.attributes = xml2jsObject.attributes;
        if (xml2jsObject.hasOwnProperty("elements"))
            this.content = xml2jsObject.elements;
        if (this.content.length === 1 && this.content[0].type === "text") {
            this.text = this.content[0].text;
            this.content = [];
        }

    }
    /**
     * Returns array of {@Link XmlElement} elements matching ```tag``` parameter.
     * @param tag Tag to search for
     */
    findAll(tag: string) : XmlElement[] {
        let result: XmlElement[] = [];
        for (const item of this.content) {
            let element = new XmlElement(item);
            if (element.tag === tag)
                result.push(element)
        }
        return result;
    }
    /**
     * Returns first {@Link XmlElement} matching ```tag``` parameter.  Creates an empty
     * element if no matching tag found
     * @param tag Tag to search for
     */
    find(tag: string) {
        let result = this.findAll(tag);
        if (result.length > 0)
            return result[0]
        else
            return new XmlElement({
                type: "element",
                name: tag,
            });
    }
}
